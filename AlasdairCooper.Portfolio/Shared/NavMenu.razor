@using System.Threading.Tasks
@using AlasdairCooper.Portfolio.Components.Nav

@inject NavigationManager _navMan

<MudNavMenu Margin="Margin.Dense" Color="Color.Primary" Class="pa-2 mb-3" Rounded Dense>
	@if (pages != null)
	{
		if (favourites != null && favourites.Count > 0)
		{
			foreach (var pageIndex in favourites)
			{
				var navPage = pages[pageIndex];

				<MudNavLink OnClick="() => LoadPage(navPage)" Match="NavLinkMatch.All" Icon="@navPage.Icon">
					<NavDetail Page="navPage" IsFavourite="true" OnFavouriteToggled="@((isFavourite) => ToggleFavourite(navPage.Id, isFavourite))" />
				</MudNavLink>
			}
			<MudDivider DividerType="DividerType.Middle" Class="my-2"/>
		}
		foreach (var navPage in pages)
		{
			<MudNavLink OnClick="() => LoadPage(navPage)" Match="NavLinkMatch.All" Icon="@navPage.Icon">
				<NavDetail Page="navPage" IsFavourite="favourites!.Contains(navPage.Id)" OnFavouriteToggled="@((isFavourite) => ToggleFavourite(navPage.Id, isFavourite))" />
			</MudNavLink>
		}
	}
</MudNavMenu>

@code {
	bool Favourited { get; set; } = false;

	NavPage[] pages = new NavPage[] { };
	public HashSet<int> favourites = new();

	protected override void OnInitialized()
	{
		pages = FetchPages();
		favourites = GetFavourites();
	}

	public void LoadPage(NavPage page)
	{
		_navService.SetCurrentPage(page);
		_navMan.NavigateTo(page.Url);
	}

	public NavPage[] FetchPages()
	{
		return new[]
		{
			_navService.CurrentPage,
			new NavPage("Counter", 1, "/counter", Icons.Material.Filled.Calculate),
			new NavPage("Fetch data", 2, "/fetchdata", Icons.Material.Filled.BarChart)
	};
	}

	public HashSet<int> GetFavourites()
	{
		return new HashSet<int> { 0 };
	}

	private void ToggleFavourite(int pageId, bool isFavourite)
	{
		if (isFavourite)
		{
			favourites.Add(pageId);
		}
		else
		{
			favourites.Remove(pageId);
		}
	}
}